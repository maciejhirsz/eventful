// Generated by CoffeeScript 1.3.2-pre
var CollectionAbstract, ObjectAbstract,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ObjectAbstract = require('ObjectAbstract');

CollectionAbstract = (function(_super) {
  var length, _items, _lastIndex;

  __extends(CollectionAbstract, _super);

  function CollectionAbstract() {
    return CollectionAbstract.__super__.constructor.apply(this, arguments);
  }

  length = 0;

  _items = {};

  _lastIndex = -1;

  CollectionAbstract.prototype.add = function(item) {
    var id;
    if (item === void 0) {
      throw "Tried to add undefined value to the collection";
    }
    if (typeof item.getId === 'function') {
      id = item.getId();
    } else {
      this._lastIndex += 1;
      id = this._lastIndex;
    }
    if (this._items[id] !== void 0) {
      throw "Item " + id + " already exists in the collection!";
    }
    this._items[id] = item;
    this.length += 1;
    this.trigger('add', item);
    return id;
  };

  CollectionAbstract.prototype.has = function(id) {
    if (this._items[id] !== void 0) {
      return true;
    }
    return false;
  };

  CollectionAbstract.prototype.get = function(id) {
    if (this._items[id] === void 0) {
      return null;
    }
    return this._items[id];
  };

  CollectionAbstract.prototype.remove = function(id) {
    var item;
    if (this._items[id] === void 0) {
      return false;
    }
    item = this._items[id];
    delete this._items[id];
    this.length -= 1;
    this.trigger('remove', item);
    return true;
  };

  CollectionAbstract.prototype.reset = function(items) {
    var id, item, tempCache, _i, _len;
    tempCache = this._items;
    this.length = 0;
    this._lastIndex = -1;
    this._items = {};
    for (id in tempCache) {
      item = tempCache[id];
      this.trigger('remove', item);
    }
    if (items !== void 0 && items instanceof Array) {
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        this.add(item);
      }
    }
    return this.trigger('reset', this);
  };

  CollectionAbstract.prototype.each = function(callback) {
    var id, item, _ref;
    if (typeof callback !== 'function') {
      throw "Callback must be a function";
    }
    _ref = this._items;
    for (id in _ref) {
      item = _ref[id];
      callback(item, id);
    }
    return this.length;
  };

  return CollectionAbstract;

})(ObjectAbstract);

module.exports = CollectionAbstract;
