// Generated by CoffeeScript 1.3.2-pre
var ObjectAbstract;

ObjectAbstract = (function() {
  var _eventHandlers;

  function ObjectAbstract() {}

  ObjectAbstract.prototype.options = {};

  _eventHandlers = {};

  ObjectAbstract.prototype._testEventName = function(event) {
    if (typeof event !== 'string') {
      throw "Event name has to be a string";
    }
  };

  ObjectAbstract.prototype._testCallback = function(callback) {
    if (typeof callback !== 'function') {
      throw "Event listener callback has to be defined and be a function";
    }
  };

  ObjectAbstract.prototype.setOptions = function(options) {
    var option;
    if (options !== void 0) {
      for (option in this.options) {
        if (options[option] !== void 0) {
          this.options[option] = options[option];
        }
      }
      return true;
    }
    return false;
  };

  ObjectAbstract.prototype.on = function(event, callback) {
    this._testEventName(event);
    this._testCallback(callback);
    if (this._eventHandlers[event] === void 0) {
      this._eventHandlers[event] = [];
    }
    return this._eventHandlers[event].push(callback);
  };

  ObjectAbstract.prototype.off = function(event, callback) {
    var func, index, _i, _len, _ref;
    this._testEventName(event);
    this._testCallback(callback);
    if (this._eventHandlers[event] === void 0) {
      return false;
    }
    _ref = this._eventHandlers[event];
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      func = _ref[index];
      if (func === callback) {
        this._eventHandlers[event].splice(index, index);
        return true;
      }
    }
    return false;
  };

  ObjectAbstract.prototype.offAll = function(event) {
    this._testEventName(event);
    if (this._eventHandlers[event] !== void 0) {
      return delete this._eventHandlers[event];
    }
  };

  ObjectAbstract.prototype.trigger = function(event, data) {
    var callback, _i, _len, _ref;
    this._testEventName(event);
    if (this._eventHandlers[event] === void 0) {
      return false;
    }
    _ref = this._eventHandlers[event];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      callback = _ref[_i];
      callback(data);
    }
    return true;
  };

  return ObjectAbstract;

})();

module.exports = ObjectAbstract;
