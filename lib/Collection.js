// Generated by CoffeeScript 1.3.2-pre
var CollectionAbstract, Model, ObjectAbstract,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ObjectAbstract = require('abstract').ObjectAbstract;

Model = require('Model');

CollectionAbstract = (function(_super) {

  __extends(CollectionAbstract, _super);

  CollectionAbstract.prototype.length = 0;

  CollectionAbstract.prototype._models = {};

  CollectionAbstract.prototype.options = {
    model: Model,
    idAttribute: null
  };

  function CollectionAbstract(options) {
    this.setOptions(options);
  }

  CollectionAbstract.prototype.add = function(data) {
    var model;
    if (typeof data !== 'object') {
      throw "Tried to add " + (typeof data) + " value to the collection, expected object";
    }
    if (model._isModel !== true) {
      model = this.create(data);
    } else {
      model = data;
    }
    if (this._models[model.id] !== void 0) {
      throw "Model " + model.id + " already exists in the collection!";
    }
    this._models[model.id] = model;
    this.length += 1;
    this.trigger('add', model);
    return model.id;
  };

  CollectionAbstract.prototype.create = function(attributes) {
    return new this.options.model(attributes);
  };

  CollectionAbstract.prototype.has = function(id) {
    if (this._models[id] !== void 0) {
      return true;
    }
    return false;
  };

  CollectionAbstract.prototype.get = function(id) {
    if (this._models[id] === void 0) {
      return null;
    }
    return this._models[id];
  };

  CollectionAbstract.prototype.remove = function(id) {
    var model;
    if (this._models[id] === void 0) {
      return false;
    }
    model = this._models[id];
    delete this._models[id];
    this.length -= 1;
    this.trigger('remove', model);
    return true;
  };

  CollectionAbstract.prototype.reset = function(data) {
    var id, item, model, tempCache, _i, _len;
    tempCache = this._models;
    this.length = 0;
    this._lastIndex = -1;
    this._models = {};
    for (id in tempCache) {
      model = tempCache[id];
      this.trigger('remove', model);
    }
    if (data !== void 0 && data instanceof Array) {
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        item = data[_i];
        this.add(item);
      }
    }
    return this.trigger('reset');
  };

  CollectionAbstract.prototype.each = function(callback) {
    var id, model, _ref;
    if (typeof callback !== 'function') {
      throw "Callback must be a function";
    }
    _ref = this._models;
    for (id in _ref) {
      model = _ref[id];
      callback(model, id);
    }
    return this.length;
  };

  return CollectionAbstract;

})(ObjectAbstract);

module.exports = CollectionAbstract;
