// Generated by CoffeeScript 1.3.2-pre
var CollectionAbstract, Model, ObjectAbstract,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ObjectAbstract = require('abstracts').ObjectAbstract;

Model = require('Model');

CollectionAbstract = (function(_super) {

  __extends(CollectionAbstract, _super);

  CollectionAbstract.prototype.length = 0;

  CollectionAbstract.prototype._modelsHash = {};

  CollectionAbstract.prototype.models = [];

  CollectionAbstract.prototype.options = {
    model: Model,
    idAttribute: null,
    comparator: null,
    reverseSort: false
  };

  CollectionAbstract.prototype._filterFromArray = function(array, element) {
    var x, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      x = array[_i];
      if (x !== element) {
        _results.push(x);
      }
    }
    return _results;
  };

  function CollectionAbstract(options) {
    this.setOptions(options);
  }

  CollectionAbstract.prototype.add = function(data, options) {
    var model,
      _this = this;
    options || (options = {});
    if (typeof data !== 'object') {
      throw "Tried to add " + (typeof data) + " value to the collection, expected object";
    }
    if (data._isModel !== true) {
      model = this.create(data);
    } else {
      model = data;
    }
    if (this._modelsHash[model.id] !== void 0) {
      throw "Model " + model.id + " already exists in the collection!";
    }
    this._modelsHash[model.id] = model;
    this.models.push(model);
    this.length += 1;
    model.on('destroy', function(id) {
      return _this.remove(id);
    });
    if (options.silent !== true) {
      this.trigger('add', model);
    }
    if (this.options.comparator != null) {
      this.sort({
        silent: true
      });
    }
    return model.id;
  };

  CollectionAbstract.prototype.create = function(attributes) {
    return new this.options.model(attributes, {
      idAttribute: this.options.idAttribute
    });
  };

  CollectionAbstract.prototype.has = function(id) {
    if (this._modelsHash[id] !== void 0) {
      return true;
    }
    return false;
  };

  CollectionAbstract.prototype.at = function(index) {
    if (this.models[index] !== void 0) {
      return this.models[index];
    }
    return null;
  };

  CollectionAbstract.prototype.get = function(id) {
    if (this._modelsHash[id] === void 0) {
      return null;
    }
    return this._modelsHash[id];
  };

  CollectionAbstract.prototype.remove = function(id, options) {
    var model;
    options || (options = {});
    if (this._modelsHash[id] === void 0) {
      return false;
    }
    model = this._modelsHash[id];
    delete this._modelsHash[id];
    this.models = this._filterFromArray(this.models, model);
    this.length -= 1;
    if (options.silent !== true) {
      this.trigger('remove', model);
    }
    return true;
  };

  CollectionAbstract.prototype.reset = function(data, options) {
    var id, item, model, tempCache, _i, _len;
    options || (options = {});
    tempCache = this._modelsHash;
    this.length = 0;
    this._lastIndex = -1;
    this._modelsHash = {};
    for (id in tempCache) {
      model = tempCache[id];
      this.trigger('remove', model);
    }
    if (data !== void 0 && data instanceof Array) {
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        item = data[_i];
        this.add(item);
      }
    }
    if (options.silent !== true) {
      return this.trigger('reset');
    }
  };

  CollectionAbstract.prototype.sort = function(options) {
    var comparator, _ref;
    options || (options = {});
    if ((_ref = typeof this.options.comparator) !== 'function' && _ref !== 'string') {
      throw "Tried to sort the collection without a comparator";
    }
    if (typeof this.options.comparator === 'string') {
      comparator = function(model) {
        return model.get('string');
      };
    } else {
      comparator = this.options.comparator;
    }
    if (comparator.lenght === 1) {
      this.models.sort(function(left, right) {
        var a, b;
        a = comparator(left);
        b = comparator(right);
        if (a < b) {
          return -1;
        } else if (a > b) {
          return 1;
        } else {
          return 0;
        }
      });
    } else if (comparator.length === 2) {
      this.models.sort(comparator);
    }
    if (this.options.reverseSort === true) {
      this.models.reverse();
    }
    if (options.silent !== true) {
      return this.trigger('reset');
    }
  };

  CollectionAbstract.prototype.each = function(callback) {
    var model, _i, _len, _ref;
    if (typeof callback !== 'function') {
      throw "Callback must be a function";
    }
    _ref = this.models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      model = _ref[_i];
      callback(model);
    }
    return this.length;
  };

  CollectionAbstract.prototype.filter = function(filterCallback) {
    var model, _i, _len, _ref, _results;
    _ref = this.models;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      model = _ref[_i];
      if (filterCallback(model)) {
        _results.push(model);
      }
    }
    return _results;
  };

  return CollectionAbstract;

})(ObjectAbstract);

module.exports = CollectionAbstract;
